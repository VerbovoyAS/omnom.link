<?php
// В этом класс отслеживаем URL 
     class App {
        // хначения по умолчанию
        protected $controller = 'Home';
        protected $method = 'index';
        protected $params = [];

        public function parserUrl() {
            if(isset($_GET['url'])){
                return explode('/', filter_var(rtrim($_GET['url'], '/'), FILTER_SANITIZE_STRING));
                // Функция rtrim() удаляет конретный символ в начале и в конце в нашем случае это /
                // Фунция filter_var() очищает от лишних символов
                // Функция explode() разбивает по символу, принимает два парметра, 1 символ по которому мы разбиваем саму строку, 2 сама строка
            }
        }

        public function __construct(){
            $url = $this->parserUrl();
            // В полученом массиве 1 параметр - котроллер, 2 - метод, 3 - доп параметры
            
            // проверка на пустой массив
            // В перую очередь нужно проверить наличее контроллера
            // Функция file_exists() проверяет наличие файла 
            // Функция ucfirst() делает первую букву заглавной
            if($url !== NULL) {
                if(file_exists('app/controller/' . ucfirst($url[0] ). '.php')){
                    // В переменную $controller записываем значение контроллера 
                    $this->controller = ucfirst($url[0]);
                    unset($url[0]);
                }
            }

            
            // Подключаем сам файл контроллера
            require_once 'app/controller/' . $this->controller . '.php';
            
            // Создаем объект и поместим в переменную $controller, а название класса мы используем $this->controller который получили из массива, или которое стоит по умлч
            $this->controller = new $this->controller;
            // Проверяем есть ли второй параметр в массиве
            if(isset($url[1])){
                // Функция method_exists() позволяет проверить есть ли какая либо функция, метод в каком либо классе
                if(method_exists($this->controller, $url[1])){
                    // Если такой метод есть то в переменную $metod устанавливам новую функцию
                    $this->method = $url[1];
                    unset($url[1]);
                }
            }
            
            // Проверяем массив, если он НЕ пустой, то тогда передаем в $params этот массив, иначе записываем пустой массив
            // Функция array_values() обнуляет индексы для конкретного массива
            $this->params = $url ? array_values($url) : [];
            
            // Функция call_user_func_array() может вызвать функцию внутри какого либо класса и в вызываемую функцию можно передать параметры
            // 1 параметр функции принимает массив в котором 
                //1эл.массива название класса в котором мы будем вызывать функцию
                //2эл.массива название метода(функции) который мы будем вызывать
            // 2 параметром передаем параметры для метода(функции)
            call_user_func_array([$this->controller, $this->method], $this->params);

            
        }
        
     }

